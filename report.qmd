---
title: "Euoplos Rainbow - Golden Trapdoor Spider"
author: "Team - Dragon, Members - Jay, Justin, Bilal, Hardik & Parnika"
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = F, 
                      warning=FALSE, 
                      message=FALSE,
                      fig.align = 'center')
```  

# Introduction
::: {#fig-elephants layout-ncol=2}

![Golden Trapdoor Spider](image1.jpeg){#fig-img1}

![Golden Trapdoor Spider](image2.jpeg){#fig-img2}

Euoplos Rainbow
:::

Genus Euoplos Rainbow, belonging to the family Idiopidae, is a fascinating group of armored trapdoor spiders endemic to Australia. First described by William Joseph Rainbow in 1914, this genus comprises 14 recognized species. These spiders typically range in size from 10 to 25 mm and are characterized by their heavily armored carapaces and opisthosomae. While their carapaces tend to be dark in color, their opisthosomae can display striking patterns and vibrant colors.

Euoplos spiders are nocturnal hunters, primarily active during the night, emerging from their burrows to capture prey. Their burrows, often constructed in sandy or loamy soil, feature a hinged lid that serves as both protection and a concealed trap for unsuspecting prey. They are versatile predators, preying on a variety of insects and invertebrates with their powerful fangs.

These spiders can be found in diverse habitats across Australia, including forests, woodlands, grasslands, and deserts. Their preference for dry, open habitats is particularly noteworthy.

Information about the population trends of Euoplos Rainbow is limited, largely due to the secretive nature of these spiders. Some species may face threats from habitat loss, degradation, and competition from introduced spider species, but more research is needed to determine their conservation status.

In terms of expectations for exploring data on Euoplos Rainbow sightings, some unique possibilities include:

1. We expect to observe a concentration of Euoplos Rainbow occurrences in subtropical eastern Australia, reflecting their abundance in this region.

2. We anticipate that Euoplos Rainbow sightings are more likely to occur during hot and dry weather, particularly in the summer season.

3. Given their nocturnal behavior, we expect the majority of sightings to occur during nighttime hours.

4. We expect to observe a declining trend in Euoplos Rainbow sightings due to their endangered status.

5. We expect that population data for Euoplos Rainbow may be limited, as is common with many spider species due to their secretive behavior, making precise assessments challenging

These expectations provide a basis for exploring and analyzing the data on Euoplos Rainbow sightings while considering their unique biology and habitat preferences.


```{r}
library(ggplot2)
library(patchwork)
library(lubridate)
library(galah)
library(tidyverse)
library(zoo)
library(sf)
library(readr)
library(here)
library(tsibble)
library(gridExtra)
library(sf)
library(plotly)
library(dplyr)
library(broom)
library(kableExtra)
```

# Data Cleaning

```{r, eval = F, echo = T}
#| code-fold: true
#| code-summary: "Load raw data"
galah_config(email = "jaysangani04@gmail.com")
Euoplos_Rainbow <- galah_call() |>
  galah_identify("Euoplos Rainbow") |>
  atlas_occurrences()

# Filter records based on date (reliable sightings after 1990)
Euoplos_Rainbow <- Euoplos_Rainbow %>%
  filter(eventDate >= as.Date("1990-01-01"))

save(Euoplos_Rainbow, file = "data-raw/Euoplos_Rainbow.rda")
```

```{r, eval = F, echo = T}
#| code-fold: true
#| code-summary: "Filter out unreliable sightings (BASIS_OF_RECORD_INVALID)"
Euoplos_Rainbow_assert <- galah_call() |>
  galah_identify("Euoplos Rainbow") |>
  galah_select( group = "assertions") |>
  atlas_occurrences() %>%
  filter(BASIS_OF_RECORD_INVALID != "TRUE")

Euoplos_Rainbow_event <- galah_call() |>
  galah_identify("Euoplos Rainbow") |>
  galah_select(cl22, basisOfRecord, group = "event") |>
  atlas_occurrences()
```

```{r, eval = F, echo = T}
#| code-fold: true
#| code-summary: "Convert eventDate to Date format without the time component"
Euoplos_Rainbow$eventDate <- as.Date(Euoplos_Rainbow$eventDate)
Euoplos_Rainbow_event$eventDate <- as.Date(Euoplos_Rainbow_event$eventDate)
```

```{r, eval = F, echo = T}
#| code-fold: true
#| code-summary: "Working with format of time variable"
# Convert timezone-specific times to plain hour:minute:second format
timezone_format <- grepl("\\+[0-9]{2}:[0-9]{2}|Z", Euoplos_Rainbow_event$eventTime)
Euoplos_Rainbow_event$eventTime[timezone_format] <- substr(Euoplos_Rainbow_event$eventTime[timezone_format], 1, 8)

# For plain hour:minute, append ":00" to make it hour:minute:second
plain_time_format <- grepl("^[0-9]{2}:[0-9]{2}$", Euoplos_Rainbow_event$eventTime)
Euoplos_Rainbow_event$eventTime[plain_time_format] <- paste0(Euoplos_Rainbow_event$eventTime[plain_time_format], ":00")
```

```{r, eval = F, echo = T}
#| code-fold: true
#| code-summary: "Perform merging and filtering"
# Merging based on eventDate
Euoplos_Rainbow_2 <- merge(Euoplos_Rainbow, Euoplos_Rainbow_event, by="eventDate", keep.all=TRUE)

# Merging the result with Euoplos_Rainbow_assert based on recordID
Euoplos_Rainbow_3 <- merge(Euoplos_Rainbow_2, Euoplos_Rainbow_assert, by="recordID", keep.all=TRUE)

# Convert 12-hour format to 24-hour format
twelve_hour_format <- grepl("[APM]{2}", Euoplos_Rainbow_event$eventTime, ignore.case=TRUE)
Euoplos_Rainbow_event$eventTime[twelve_hour_format] <- format(strptime(Euoplos_Rainbow_event$eventTime[twelve_hour_format], format="%I:%M %p"), "%H:%M:%S")

#converting time from AM/PM to HH:MM:SS
convert_time <- function(time) {
  if(grepl("AM|PM", time, ignore.case = TRUE)) {
    return(format(parse_date_time(time, "h:M%p"), "%H:%M:%S"))
  }
  return(time)
}

Euoplos_Rainbow_3$eventTime <- sapply(Euoplos_Rainbow_3$eventTime, convert_time)

#selecting neccesory variables
Euoplos_Rainbow_3 <- Euoplos_Rainbow_3 %>% 
  select(decimalLatitude, decimalLongitude, eventDate,scientificName, taxonConceptID, recordID, dataResourceName, occurrenceStatus, BASIS_OF_RECORD_INVALID, eventTime, basisOfRecord, cl22) %>%
  rename(State = cl22)

#removing duplicates from the dataset
Euoplos_Rainbow_combined <- Euoplos_Rainbow_3 %>% 
  distinct()

Euoplos_Rainbow_combined$eventTime <- hms::as_hms(Euoplos_Rainbow_combined$eventTime)

final_Euoplos_Rainbow <- Euoplos_Rainbow_combined %>%
  filter(basisOfRecord == "HUMAN_OBSERVATION")
```

```{r, eval = F, echo = T}
#| code-fold: true
#| code-summary: "Save final clean data"
save(final_Euoplos_Rainbow, file = "data/final_Euoplos_Rainbow.rda")
```

```{r}
load("data-raw/Euoplos_Rainbow.rda")
load("data/final_Euoplos_Rainbow.rda")
```

# Data Description

```{r}
library(kableExtra)
# Create a data frame for the table
data_description <- data.frame(
  Variable_Name = c("decimalLatitude", "decimalLongitude", "eventDate", "scientificName", "taxonConceptID", 
                    "recordID", "dataResourceName", "occurrenceStatus", "BASIS_OF_RECORD_INVALID", 
                     "eventTime", "basisOfRecord"),
  Data_Type = c("Double", "Double", "Date", "Character", "Character", "Character", "Character", "Character", 
                "Logical", "Time", "Character"),
  Description = c("Latitude at which the sighting was recorded.", 
                  "Longitude at which the sighting was recorded.", 
                  "The date when the sighting occurred.", 
                  "The scientific name of the species; consistently labeled as 'Euoplos rainbow'.", 
                  "A unique URL that redirects to the specific taxonomy concept on biodiversity.org.au.", 
                  "A distinct identifier for every record in the dataset.", 
                  "The title of the institution or data resource provider that collected the data.", 
                  "Denotes the status of the sighting, with a common value being 'PRESENT'.", 
                  "A binary marker indicating the validity of the record (TRUE/FALSE).", 
                  "The precise time the event or sighting took place. Several records may have this detail omitted ('NA').", 
                  "Filter to only HUMAN_OBSERVATION value to ensure all data is wild sightings, original variable also include value of PRESERVED_SPECIMEN")
)

# Use kable and kable_styling to display the table
kable(data_description, format = "html", booktabs = TRUE, caption = "Description of Variables in the `final_Euoplos_Rainbow` Dataset") %>%
  kable_styling()
```

::: {.callout-note}
The Euoplos_Rainbow_combined dataset encapsulates 1,042 entries and is comprised of 12 variables. The data is derived from multiple sources, as can be discerned from the distinct dataResourceName entries. The main contributor appears to be the Western Australian Museum.

To ensure the dataset's accuracy and relevance, several processing and cleaning steps were executed:

* **Filtering by Date**: Only sightings post-1990 were considered to ensure the relevancy and reliability of the records.

* **Validity Check**: Entries that were deemed unreliable (marked as BASIS_OF_RECORD_INVALID) were filtered out to maintain data integrity.

* **Date Formatting**: The eventDate variable was converted to a standard Date format for uniformity.

* **Time Formatting**: Timezone-specific timestamps were adjusted to a standardized hour:minute:second format. Any 12-hour formatted times were converted to a 24-hour format for consistency.

* **Merging Data**: Multiple datasets were merged based on shared variables like eventDate and recordID to create a comprehensive dataset.

* **Removing Duplicates**: Duplicate entries were identified and removed, ensuring each record in the dataset is unique.

* **Saving Dataset**: After cleaning and formatting, the dataset was saved as an R object to ensure ease of access and repeatability of the analysis.

The dataset was sourced using the galah package in R, which interfaces with the Atlas of Living Australia (ALA). The ALA platform, available at Atlas of Living Australia, served as the primary source of the raw data.

For the analysis in R, libraries such as tidyverse, galah, and lubridate were employed. The galah library was particularly crucial for sourcing the data directly from ALA, while lubridate was instrumental in managing date and time fields. The tidyverse collection of packages enabled data manipulation, cleaning, and visualization.

Before proceeding with any advanced analysis, potential users of this dataset should always check for missing values, outliers, or other anomalies that might affect the results. Given the geospatial nature of the data, considerations for spatial analyses or visualizations could also be relevant.
:::


## Weather data
```{r}
## Load in data for weather
library(rnoaa)
aus_stations <- ghcnd_stations() |>
  filter(str_starts(id, "ASN")) |>
  filter(last_year >= 2020) |>
  mutate(wmo_id = as.numeric(wmo_id),
         name = str_to_lower(name)) |>
  select(-state, -gsn_flag) |>
  filter(element %in% c("PRCP", "TMAX", "TMIN")) |>
  nest(element: last_year) |>
  rowwise() |>
  filter(nrow(data) == 3) |>
  select(-data) 
```

```{r, echo = F}
# group point into 4 clusters
# Define custom regions (latitude and longitude ranges)
group1_lat_range <- c(-27.2, -26.5)
group1_lon_range <- c(152.55, 153.5)
group2_lat_range <- c(-27.55, -27.2)
group2_lon_range <- c(152.55, 153.5)
group3_lat_range <- c(-28, -27.55)
group3_lon_range <- c(152.55, 153.5)
group4_lat_range <- c(-29, -28)
group4_lon_range <- c(152.55, 153.5)

# Function to assign points to groups
assign_to_group <- function(latitude, longitude) {
  if (latitude >= group1_lat_range[1] && latitude <= group1_lat_range[2] &&
      longitude >= group1_lon_range[1] && longitude <= group1_lon_range[2]) {
    return("Group 1")
  } else if (latitude >= group2_lat_range[1] && latitude <= group2_lat_range[2] &&
             longitude >= group2_lon_range[1] && longitude <= group2_lon_range[2]) {
    return("Group 2")
  } else if (latitude >= group3_lat_range[1] && latitude <= group3_lat_range[2] &&
             longitude >= group3_lon_range[1] && longitude <= group3_lon_range[2]) {
    return("Group 3")
  } else if (latitude >= group4_lat_range[1] && latitude <= group4_lat_range[2] &&
             longitude >= group4_lon_range[1] && longitude <= group4_lon_range[2]) {
    return("Group 4")
  } else {
    return("Other")
  }
}

# Assign points to groups
final_Euoplos_Rainbow$cluster <- mapply(assign_to_group, final_Euoplos_Rainbow$decimalLatitude, final_Euoplos_Rainbow$decimalLongitude)
```

## Most sightings occur in the Eastern Australia

```{r}
#| label: fig-fullmap
#| fig-cap: "All sightings on Australia map"

library(ozmaps)
library(ggrepel)

sf_oz <- ozmap_data("states")

gg <- ggplot() + geom_sf(data = sf_oz, fill = "#FBFBEF", color = "grey70") +
  geom_point(data = final_Euoplos_Rainbow,
                      mapping = aes(x = decimalLongitude,
                                    y = decimalLatitude
                                   ),
                      color = "blue", alpha = 0.5) +
  coord_sf(ylim = c(-44.5, -10), xlim = c(110, 155)) +
  theme_bw() +
  #theme(legend.position = "none") +
  labs(title = "Where is Eupolos Rainbow sighted?")

gg
```

::: {.callout-note}
As depicted in @fig-fullmap, our initial expectation that most sightings would occur in Eastern Australia has been confirmed, with the majority concentrated in Queensland and New South Wales, specifically around Brisbane and the Gold Coast. Notably, there have been two natural observations of Euoplos Rainbow in South Australia.
:::

```{r}
#| label: fig-station
#| fig-cap: "Weather stations with 4 groups on map"


stations_name <- aus_stations %>%
  filter(name %in% c("brisbane", "maroochydore aero", "logan city water treatment", "murwillumbah (bray park)"))

# Add the Australian state boundaries
gg <- ggplot() + geom_sf(data = sf_oz, fill = "#FBFBEF", color = "grey70") +
  geom_point(data = final_Euoplos_Rainbow,
                      mapping = aes(x = decimalLongitude,
                                    y = decimalLatitude,
                                    color = cluster
                                   ),
                      alpha = 0.5) +
  geom_point(data = stations_name, 
             mapping = aes(x = longitude,
                           y = latitude),
             color = "black", alpha = 1) +
  geom_text_repel(data = stations_name,
           mapping = aes(x = longitude,
                         y = latitude, 
                          label = name),
            size = 3, direction = "x") +
  coord_sf(ylim = c(-44.5, -10), xlim = c(110, 155)) +
  theme_bw() +
  #theme(legend.position = "none") +
  labs(title = "Where is Eupolos Rainbow sighted?")

gg + coord_sf(ylim = c(-29, -26.5), xlim = c(152, 155)) 
```

::: {.callout-note}
Initially, as shown in @fig-station, I divided the majority of Eastern Australia sightings into four distinct clusters and then matched each cluster with the nearest weather station. Any remaining sightings were categorized under the "Other" group. Consequently, for Group 1 through Group 4, the corresponding weather stations are Maroochydore Aero, Brisbane, Logan City Water Treatment, and Murwillumbah (Bray Park), respectively.
:::


```{r}
### Logan city water treatment (ASN00040854)
logan_city <- aus_stations |>
  filter(id == "ASN00040854") |>
  rowwise() |>
  mutate(ts = list(meteo_pull_monitors(
    monitors = id, var = c("PRCP", "TMAX", "TMIN"),
    date_min = "2004-01-01",
    date_max = "2023-09-13") |>
      select(-id))) |>
  rename(lat = latitude, long = longitude, elev = elevation) |> 
  select(id, long, lat, elev, name, wmo_id, ts) %>%
  unnest(ts) |>
  mutate(tmax = tmax/10, tmin = tmin/ 10)
```


```{r}
### maroochydore aero (ASN00040861)
maroochydore <- aus_stations |>
  filter(id == "ASN00040861") |>
  rowwise() |>
  mutate(ts = list(meteo_pull_monitors(
    monitors = id, var = c("PRCP", "TMAX", "TMIN"),
    date_min = "2004-01-01",
    date_max = "2023-09-13") |>
      select(-id))) |>
  rename(lat = latitude, long = longitude, elev = elevation) |> 
  select(id, long, lat, elev, name, wmo_id, ts) %>%
  unnest(ts) |>
  mutate(tmax = tmax/10, tmin = tmin/ 10)
```

```{r}
### brisbane (ASN00040913) 
brisbane <- aus_stations |>
  filter(id == "ASN00040913") |>
  rowwise() |>
  mutate(ts = list(meteo_pull_monitors(
    monitors = id, var = c("PRCP", "TMAX", "TMIN"),
    date_min = "2004-01-01",
    date_max = "2023-09-13") |>
      select(-id))) |>
  rename(lat = latitude, long = longitude, elev = elevation) |> 
  select(id, long, lat, elev, name, wmo_id, ts) %>%
  unnest(ts) |>
  mutate(tmax = tmax/10, tmin = tmin/ 10)
```

```{r}
### murwillumbah (bray park) (ASN00058158)
murwillumbah <- aus_stations |>
  filter(id == "ASN00058158") |>
  rowwise() |>
  mutate(ts = list(meteo_pull_monitors(
    monitors = id, var = c("PRCP", "TMAX", "TMIN"),
    date_min = "2004-01-01",
    date_max = "2023-09-13") |>
      select(-id))) |>
  rename(lat = latitude, long = longitude, elev = elevation) |> 
  select(id, long, lat, elev, name, wmo_id, ts) %>%
  unnest(ts) |>
  mutate(tmax = tmax/10, tmin = tmin/ 10)
```

::: {.callout-note}
Subsequently, I will individually narrow down the year range for each weather station, focusing on the periods when the majority of sightings occurred. This step is essential to ensure that weather-related data, such as precipitation, maximum temperature, and minimum temperature, are relevant to the analysis. I will achieve this by first identifying the respective cluster assigned to each weather station, combining the relevant datasets, and utilizing line plots to visually depict the years when sightings were recorded for each specific weather station.
:::

```{r}
#| label: fig-station-year
#| fig-cap: "Year range where most sightings occur for each weather station"
# Assuming you have a dataset named final_Euoplos_Rainbow
final_Euoplos_Rainbow <- final_Euoplos_Rainbow %>%
  mutate(year = year(eventDate))

# Aggregate data to count sightings per year per cluster
sightings_summary <- final_Euoplos_Rainbow %>%
  group_by(year, cluster) %>%
  summarise(sightings_count = n()) 

# Function
sighting_plot <- function(data, group, name) {
  data$year <- year(data$date)

  group_dat <- sightings_summary %>%
    filter(cluster == group)

  data <- data %>%
    left_join(group_dat, by = "year")

  ggplot(data, aes(x = year, y = sightings_count)) +
    geom_line() +
    labs(x = "Year", y = "Sightings Count", 
         subtitle = name, 
         title = "Spider Sightings Timeline") +
    scale_x_continuous(breaks = seq(min(data$year), max(data$year), by = 2)) +
    theme_minimal()
}

# Create plots
plot_maroochydore <- sighting_plot(maroochydore, "Group 1", "Maroochydore aero")
plot_brisbane <- sighting_plot(brisbane, "Group 2", "Brisbane")
plot_logan_city <- sighting_plot(logan_city, "Group 3", "Logan city")
plot_murwillumbah <- sighting_plot(murwillumbah, "Group 4", "Murwillumbah")

library(patchwork)

# Display the plots
combined_plot <- plot_maroochydore +
  plot_logan_city +
  plot_brisbane +
  plot_murwillumbah

combined_plot
```

::: {.callout-note}
As illustrated in @fig-station-year above, the primary sightings took place during the following periods: Maroochydore station from 2016 to 2023, Brisbane stations from 2020 to 2023, Logan City Water Treatment station from 2020 to 2023, and Murwillumbah station from 2018 to 2023, with a noticeable gap between 2019 and 2022. Consequently, our approach will involve filtering the data for all four weather stations based on these specific year ranges and subsequently performing a left join with the Euoplos Rainbow dataset.
:::


## 1. Joining the sightings with tourism data

```{r}
# Data downloaded from Monash A-Z Databases
# "Tourism Research Australia online for students"
# Row: Quarter/SA2
# Column: Stopover reason was Holiday, Visiting friends and relatives, Business, Other reason
# Sum Overnight trips ('000)
# Australia: Domestic Overnight Trips ('000) ----
domestic_trips <- read_csv(
  "data/domestic_trips_2023-10-08.csv",
  skip = 9,
  col_names = c("Quarter", "Region", "Holiday", "Visiting", "Business", "Other", "Total"),
  n_max = 248056
) %>% select(-X8)

# fill NA in "Quarter" using the last obs
fill_na <- domestic_trips %>%
  fill(Quarter, .direction = "down") %>%
  filter(Quarter != "Total")

# gather Stopover purpose of visit
long_data <- fill_na %>%
  pivot_longer(cols=Holiday:Total,
               names_to="Purpose",
               values_to="Trips")

# manipulate Quarter
qtr_data <- long_data %>%
  mutate(
    Quarter = paste(gsub(" quarter", "", Quarter), "01"),
    Quarter = yearquarter(myd(Quarter))
  )

# convert to tsibble
tourism <- qtr_data %>%
  as_tsibble(key = c(Region, Purpose), index = Quarter)
```

```{r}

#reading the SA2 regions
aus_map <- read_sf(here::here("data/SA2_2021_AUST_SHP_GDA2020/SA2_2021_AUST_GDA2020.shp")) %>% 
  select("SA2_NAME21", "STE_NAME21", "geometry") %>%
  rename(Region = SA2_NAME21,
         State = STE_NAME21)

#joining SA2 regions with tourism data set
tourist_filtered <- left_join(tourism, aus_map, by = c("Region")) %>%
  filter(Region %in% "Maroochydore - Kuluin") %>%
  filter(Purpose == "Holiday") %>%
  filter(Trips != 0.00) %>%
  mutate(Trips = round(Trips * 1000)) %>%
  mutate(Year = year(Quarter)) %>%
  filter(Year >= 2015) 

#adding a new variable quarter
quarter_merged <- final_Euoplos_Rainbow %>%
  mutate(
    Quarter = yearquarter(eventDate)
  ) %>%
  select("decimalLatitude", "decimalLongitude", "eventDate", "occurrenceStatus", "eventTime", "State", "Quarter")

# Joining the data to the sightings dataset
wrangled_data <- left_join(quarter_merged, tourist_filtered, by = c("Quarter", "State")) %>%
  select("Quarter", "Region", "State", "geometry", "decimalLatitude", "decimalLongitude",
         "eventDate", "eventTime", "Purpose", "Trips" , "occurrenceStatus") %>%
  filter(Trips != 0.00) 

region_subset <- wrangled_data %>%
  filter(Region %in% "Maroochydore - Kuluin") %>%
  filter(Purpose == "Holiday") %>%
  mutate(occurrenceStatus = ifelse(occurrenceStatus == "PRESENT", 1, occurrenceStatus))

region_subset <- region_subset %>%
  mutate(Region = case_when(
    Region == "Maroochydore - Kuluin" ~ "Maroochydore")) %>%
  group_by(Quarter, Region, State) %>%
  summarize(Trips = sum(Trips))

region_temporal <- region_subset %>%
  mutate(Year = year(Quarter)) %>%
  mutate(Quar = quarter(Quarter)) %>%
  group_by(Year, Quar, Region) %>%
  summarize(Trips = sum(Trips))

  


```

```{r}
#| label: fig-tourism
#| fig-cap: "Tourism Patterns Across Recent Years"

plot1 <- ggplot(data = region_temporal, aes(x = Quarter, y = Trips)) +
  geom_line(color = "steelblue", size = 1.5) +
  geom_smooth(method = "loess", color = "red", linetype = "dotted") +
  labs(title = "Time Series of Trips to Maroochydore",
       x = "Year",
       y = "Trips (in thousands)") +
  scale_y_continuous(labels = scales::number_format(scale = 1e-3)) +
  theme_minimal()

plot1 <- ggplotly(plot1)

plot1

plot2 <- ggplot(region_temporal, aes(x = Quar, y = Trips, group = Year, color = Year)) +
  geom_line() +
  labs(title = "Quarterly Plot of Trips to Maroochydore",
       x = "Quarter",
       y = "Trips (in thousands)") +
  scale_y_continuous(labels = scales::number_format(scale = 1e-3)) +
  theme_minimal() +
  facet_wrap(~ Year, scales = "free_y")

# Convert ggplot object to a plotly object
plot2 <- ggplotly(plot2)

# Display the interactive plot
plot2

```

:::{.callout-note}
The plots above provides insights into the number of trips; yearly and quarterly. Here's a more detailed analysis:

1.) **Yearly**: Tourism in Maroochydore has been consistently observed since 2016, with an increasing trend in the number of trips since 2020 as the smooth `loess` method confirms. Notable patterns in the data are observed:

  After the second quarter of 2020, there was a significant surge in tourism resulting in several peaks and an increasing trend. The series of crests and troughs signal the element of seasonality present with most peaks observed the **second** and **third** quarter of each year while the **first** and **fourth** quarters observed series of troughs. Moreover, the shape of the plot depicts presence of seasonality in tourism for Maroochydore.

2.) **Quarterly**: A detailed look in the quarterly plot shows absence of data for multiple quarters in their respective years. However, it still confirms most peaks are observed in the **second** and **third** quarters of the years. The absence of more information for Maroochydore is a data limitation.

The plot illustrates the quarterly pattern of tourism over recent quarters from 2016 to 2022. In fact, the tourism is showing a consistent increasing trend throughout. Interestingly, the trips always exceeded threshold of 5M. However, there was a slight drop in the number of trips in the first quarter of 2020 when COVID-19 was at its peak but this pandemic could not stop people from enjoying their life. Q3 2020 soon saw a rise in the domestic trips despite lockdown.

The reasons behind these trends in tourism may include various factors such as seasonal variations, regional events, economic factors, or shifts in travel preferences. Further analysis and domain-specific knowledge may be necessary to better understand these patterns.
:::

# EcoTourism Analysis

```{r}
# Adding custom theme for all the plots
custom_theme <- function() {
  theme(
    plot.title = element_text(size = 16, hjust = 0.5),
    axis.title = element_text(size = 14),
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.text = element_text(size = 12),
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
    panel.background = element_rect(fill = "white"),
    panel.grid.major = element_line(color = "lightgray"),
    panel.grid.minor = element_blank()
  )
}
```

```{r}
#| label: Sightings Data Wrangle
quarter_merged <- final_Euoplos_Rainbow %>%
  mutate(
    Quarter = yearquarter(eventDate),
    occurrenceStatus = 1,
    Year = year(eventDate) 
  ) %>%
  filter(Year <= 2022)
```


```{r}
#| label: fig-ecotourismtable
#| fig-cap: "ecotourism Table"
sightings_table <- quarter_merged %>%
  group_by(Year) %>%
  select(Quarter, occurrenceStatus)  %>%
  mutate(sightings = sum(occurrenceStatus)) %>%
  ungroup()

tourism_table <- tourist_filtered %>%
group_by(Year) %>%
select(Quarter, Trips)  %>%
mutate(travel = sum(Trips)) %>%
  ungroup()

eco_tourism_data <- inner_join(sightings_table, tourism_table, by = c("Quarter")) %>%
  select("Quarter", "sightings", "travel") 
```

```{r}
#| label: fig-regressionplot
#| fig-cap: "Regression Plot"
regression <- eco_tourism_data %>%
ggplot(aes(x = log(travel), y = sightings)) + 
  geom_point(color = "red") + 
  geom_smooth(formula = y ~ x, method = "lm", se = FALSE, colour = "darkblue") +
  labs(
    title = "Association between Sightings and Tourism",
    x = "Tourism", 
    y = "Sightings"
  ) + custom_theme()

final_reg <- ggplotly(regression)
final_reg 
```


@fig-regressionplot uses the simple regression method to show the association between Sightings and Trips. For this analysis, we considered `Sightings` as a `Response Variable` and `Tourism` as an `Explanatory Variable` meaning we are using Tourism data to predict the values of spider sightings. It is evident from the above graph that there is no association between two variables. I do not believe that Sightings and Tourism share any significant relationship. 

Lets drill further using Hypothesis Test to check the validity of our assumption.

```{r}
eco_tourism_data_lm <- eco_tourism_data %>%
lm(formula = travel ~ sightings)
coefs <- tidy(eco_tourism_data_lm) 
kable(coefs) %>%
kable_styling(latex_options = "HOLD_position")
```



- H0 : There exists a linear association between Tourism and Spider Sightings.
- α : 0.05 (Industry Standard)
- p-value : `r coefs$p.value` (Calculated)

:::{.callout-note}
Our Hypothesis analysis provides strong evidence that there is no association between the Golden Trapdoor Spider and tourism. The extremely small p-values, though not exactly zero, strongly suggest that the observed results are highly unlikely to have occurred by random chance. Consequently, we can confidently reject the null hypothesis implying the lack of any significant relationship between the presence of the Golden Trapdoor Spider and tourism. 

Since the p-value < α, we reject the null hypothesis and conclude that there is insufficient evidence that there is a linear association between the Tourism and Spider Sightings.
:::

We can also find the correlation between sightings and travel using the `cor` function. The output shows the positive correlation being very weak at a value of `r cor(eco_tourism_data$travel, eco_tourism_data$sightings)` between the two variables. This means that the two variables have a very slight tendency to move in the same direction, but the relationship is not strong or significant.

```{r}
#| label: fig-residplot
#| fig-cap: "Residue Plot"
eco_tourism_data <- eco_tourism_data %>%
  mutate(resids = eco_tourism_data_lm$residuals)

p7 <- eco_tourism_data %>%
  ggplot(aes(x = log(travel), y = log(resids))) +  
  geom_point(colour = "hotpink") +
  geom_hline(yintercept = 0, color = "darkblue")  +
  labs(
    title = "Residuals Plot",
    x = "Tourism", 
    y = "Residuals"
  ) + custom_theme()

final_p7 <- ggplotly(p7)
final_p7 
```

@fig-residplot shows that there is weak relationship between travel and tourism.

:::{.callout-note}
# Key Takeaways
- There is evidence of seasonality in tourism in Maroochydale.
- There is an increasing trend of tourists visiting Maroochydale since 2020.
- There exists no relationship between tourism and sightings due to a very slight correlation; not enough to agree there is a relationship.
- It seems that these spiders are not a big fan of human beings. In fact, their sightings remained all low till 2020 until COVID-19 which in turn caused a burst in their sightings.
:::

# References


1. Australian Faunal Directory. (n.d.). Euoplos. https://biodiversity.org.au/afd/taxa/Euoplos

2. Atlas of Living Australia. (n.d.). Euoplos. https://bie.ala.org.au/species/https://biodiversity.org.au/afd/taxa/1b5cd7fc-fed7-4788-ac39-b33cafc7bbb4

3. Australian Spiders in Colour. (n.d.). Spider Identification. https://www.termite.com.au/spider-identification.html

4. Find-a-spider Guide. (n.d.). A Photographic Guide to Australian Spiders. http://www.findaspider.org.au/find/spiders/409.htm


::: {.callout-caution collapse="true"}
# Package Citation

## tidyverse

Wickham H, Averick M, Bryan J, Chang W, McGowan LD, François R, Grolemund G, Hayes A, Henry L,
Hester J, Kuhn M, Pedersen TL, Miller E, Bache SM, Müller K, Ooms J, Robinson D, Seidel DP, Spinu
V, Takahashi K, Vaughan D, Wilke C, Woo K, Yutani H (2019). “Welcome to the tidyverse.” _Journal of
Open Source Software_, *4*(43), 1686. doi: 10.21105/joss.01686 (URL:
https://doi.org/10.21105/joss.01686).

## galah

Westgate M, Stevenson M, Kellie D, Newman P (2023). _galah: Atlas of Living Australia (ALA) Data and
Resources in R_. R package version 1.5.2, <URL: https://CRAN.R-project.org/package=galah>.

## visdat

Tierney N (2017). “visdat: Visualising Whole Data Frames.” _JOSS_, *2*(16), 355. doi:
10.21105/joss.00355 (URL: https://doi.org/10.21105/joss.00355), <URL:
http://dx.doi.org/10.21105/joss.00355>.

## rnoaa

Scott Chamberlain and Daniel Hocking (2023). rnoaa: 'NOAA' Weather Data from R. R package version
  1.4.0. https://CRAN.R-project.org/package=rnoaa
  
## lubridate

Garrett Grolemund, Hadley Wickham (2011). Dates and Times Made Easy with lubridate. Journal of
  Statistical Software, 40(3), 1-25. URL https://www.jstatsoft.org/v40/i03/.
  
## ozmaps

Michael Sumner (2021). ozmaps: Australia Maps. R package version 0.4.5.
  https://CRAN.R-project.org/package=ozmaps
  
## patchwork

Thomas Lin Pedersen (2023). patchwork: The Composer of Plots. R package version 1.1.3.
  https://CRAN.R-project.org/package=patchwork

## ggrepel

Kamil Slowikowski (2023). ggrepel: Automatically Position Non-Overlapping Text Labels with 'ggplot2'.
  R package version 0.9.3. https://CRAN.R-project.org/package=ggrepel

## colorspace

Zeileis A, Fisher JC, Hornik K, Ihaka R, McWhite CD, Murrell P, Stauffer R, Wilke CO (2020).
“colorspace: A Toolbox for Manipulating and Assessing Colors and Palettes.” _Journal of Statistical
Software_, *96*(1), 1-49. doi: 10.18637/jss.v096.i01 (URL: https://doi.org/10.18637/jss.v096.i01).

## plotly

C. Sievert. Interactive Web-Based Data Visualization with R, plotly, and shiny. Chapman and Hall/CRC
  Florida, 2020.
  
## kableExtra

Hao Zhu (2021). kableExtra: Construct Complex Table with 'kable' and Pipe Syntax. R package version
  1.3.4. https://CRAN.R-project.org/package=kableExtra

:::

